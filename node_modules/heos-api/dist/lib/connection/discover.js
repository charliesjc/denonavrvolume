"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var dgram_1 = require("dgram");
var connect_1 = require("./connect");
var searchTargetName = 'urn:schemas-denon-com:device:ACT-Denon:1';
var message = [
    'M-SEARCH * HTTP/1.1',
    'HOST: 239.255.255.250:1900',
    "ST: " + searchTargetName,
    'MX: 5',
    'MAN: "ssdp:discover"',
    '\r\n'
].join('\r\n');
var defaultTimeout = 5000;
/**
 * Tries to discover all available HEOS devices in the network.
 * @param options Options for discovering devices.
 * @param onDiscover Will trigger every time a HEOS device is discovered.
 * @param onTimeout Will trigger when `timeout` has ellapsed.
 */
function discoverDevices(options, onDiscover, onTimeout) {
    var timeout = typeof options === 'number' ? options || defaultTimeout : options.timeout || defaultTimeout;
    var socket = dgram_1.createSocket('udp4');
    typeof options !== 'number' ? socket.bind(options.port, options.address) : socket.bind();
    socket.on('listening', function () {
        socket.send(message, 1900, '239.255.255.250');
    });
    var addresses = [];
    socket.on('message', function (msg, rinfo) {
        if (msg.includes(searchTargetName)) {
            onDiscover(rinfo.address);
            addresses.push(rinfo.address);
        }
    });
    var timeOutReferance = setTimeout(quit, timeout);
    function quit() {
        socket.close();
        if (onTimeout) {
            onTimeout(addresses);
        }
        global.clearTimeout(timeOutReferance);
    }
    return quit;
}
exports.discoverDevices = discoverDevices;
/**
 * Finds one HEOS device in the network.
 * @param options Options for discovering a device.
 * @returns A promise that will resolve when the first device is found, or reject if no devices are found before `timeout` milliseconds have passed. If the function resolves it will resolve with the address of the HEOS device found.
 */
function discoverOneDevice(options) {
    if (options === void 0) { options = defaultTimeout; }
    return new Promise(function (resolve, reject) {
        var oneDiscovered = false;
        function onDiscover(adress) {
            if (oneDiscovered) {
                return;
            }
            oneDiscovered = true;
            quit();
            resolve(adress);
        }
        function onTimeout(adresses) {
            if (!oneDiscovered) {
                reject('No devices found');
            }
        }
        var quit = discoverDevices(options, onDiscover, onTimeout);
    });
}
exports.discoverOneDevice = discoverOneDevice;
/**
 * Finds one HEOS device in the network, and connects to it.
 * @param options Options for discovering a device.
 * @returns A promise that will resolve when the first device is found, or reject if no devices are found before `timeout` milliseconds have passed. If the function resolves it will resolve with a HeosConnection.
 */
function discoverAndConnect(options) {
    if (options === void 0) { options = defaultTimeout; }
    return new Promise(function (resolve, reject) {
        discoverOneDevice(options)
            .then(connect_1.connect)
            .then(resolve)
            .catch(reject);
    });
}
exports.discoverAndConnect = discoverAndConnect;
//# sourceMappingURL=discover.js.map