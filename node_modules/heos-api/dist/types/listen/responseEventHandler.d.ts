/// <reference types="node" />
import { HeosResponse, HeosEvent, HeosCommand, HeosEventListener } from '../types';
import { EventEmitter } from 'events';
import { HeosConnection } from '../connection/heosConnection';
export declare type HeosConnectionAllEventEmitter = (listener: HeosEventListener) => HeosConnection;
/**
 * @param event The event to trigger the listener on.
 * @param listener A callback function that will be triggered when the event happens.
 * @returns A HeosConnection
 */
export declare type HeosConnectionEventEmitter = (event: HeosCommand, listener: HeosEventListener) => HeosConnection;
/**
 * @param event The event to trigger the listener on.
 * @returns A HeosConnection
 */
export declare type HeosAllEventEmitter = (listener: HeosEventListener) => ResponseEventHandler;
export declare type HeosEventEmitter = (event: HeosCommand, listener: HeosEventListener) => ResponseEventHandler;
export declare class ResponseEventHandler {
    constructor();
    emitter: EventEmitter;
    listenersOnAll: (HeosEventListener)[];
    put(message: HeosResponse | HeosEvent): void;
    on(event: HeosCommand, listener: HeosEventListener): ResponseEventHandler;
    once(event: HeosCommand, listener: HeosEventListener): ResponseEventHandler;
    onAll(listener: HeosEventListener): ResponseEventHandler;
}
